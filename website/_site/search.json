[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homophone Checker Using Bert",
    "section": "",
    "text": "Unlike typical spelling or grammatical errors, using the wrong homophone can result in sentences that sound perfectly correct but actually use the wrong word(s) entirely. A homophone is defined as “one of two or more words pronounced alike but different in meaning or derivation or spelling (such as the words to, too, and two)”. While most grammar and spelling checks can pick up on these mistakes, others, such as Apple’s phone keyboards, fail to check and correct such mistakes. In this project, we hope to create a model capable of taking an input text and correctly identifying and correcting homophone mistakes to output a grammatically correct sentence.\nA unique difficulty with homophones is that they can vary based on a dialect. For example, shed and shared are homophones in the Australian dialect, but in American English, these words sound entirely different. Some homophones are homophones independent of dialect while others depend on the dialect. For this project, we have assembled 442 sets of homophones such as [to, too, and two] containing a total of 941 homophones. We do not claim that our list contains all possible homophones, if such a definitive list does exist. However, we believe our list encompasses the most common American and English dialects’ homophones and that our results would hold for a larger list of homophones as the model would work similarly.\nIn addition to the development of this homophone correction model, we have taken a step further by creating an interactive web application. This web app, designed with user-friendliness in mind, allows users to input text and receive corrected versions in real-time. It’s not just about correcting homophones; the web app also integrates spelling corrections, offering users a comprehensive text correction tool. This deployment as an interactive webpage demonstrates the practical application of our NLP model, making it accessible and useful for everyday text correction needs.\nThrough this project, we have expanded beyond traditional text correction, introducing a tool that is both theoretically robust and practically valuable, enhancing written communication across different dialects and everyday scenarios."
  },
  {
    "objectID": "index.html#text-retrieval",
    "href": "index.html#text-retrieval",
    "title": "Homophone Checker Using Bert",
    "section": "Text Retrieval",
    "text": "Text Retrieval\nFirst, we had to find a sufficiently large, grammatically correct corpus. To do this we used Project Gutenberg to read in 10 books. We are operating on the assumption that published text, particularly the most popular ones on the project will be almost entirely grammatically correct, with some potential exceptions such as dialogue. However, with a large enough dataset, these occasion mistakes should not impact the overall accuracy reads on our model. We selected the top 10 books by downloads on Project Gutenberg:\n\nFrankenstein\nMoby Dick; Or, The Whale\nA Room with a View\nMiddlemarch\nPride and Prejudice\nThe Complete Works of William Shakespeare\nLittle Women\nThe Enchanted April\nThe Blue Castle\n\nThese were then read in using the requests library. Capitalization was then removed for consistent formatting. Then, we cleaned any text formatting to create a giant text that was then put through NLTK’s sent_tokenize function to create a list of sentences from the 10 books. In total, we found 68,573 total sentences."
  },
  {
    "objectID": "index.html#homophones-list",
    "href": "index.html#homophones-list",
    "title": "Homophone Checker Using Bert",
    "section": "Homophones List",
    "text": "Homophones List\nWe then assembled our list of homophones using a variety of online homophone lists and combinations we could think of."
  },
  {
    "objectID": "index.html#error-insertion",
    "href": "index.html#error-insertion",
    "title": "Homophone Checker Using Bert",
    "section": "Error Insertion",
    "text": "Error Insertion\nAs above, we are operating on the assumption that all of the sentences in our dataset begin as grammatically correct, containing no homophone mistakes. Therefore, we need to artificially create homophone mistakes in our to test our models effectiveness on a large scale.\nWe flattened our list of homophones sets to create a list containing all 942 possible homophones. We then iterated through each sentence. If a sentence contained no possible homophone mistakes, there is nothing further to do. If it contains one homophone, then the homophone is replaced with a mistaken homophone with probability p=0.7. This p value was selected to give a sufficiently large collection of mistakes to analyze the models performance. If a sentence contains multiple homophones, including the same homophone multiple times (most commonly occurs for “to”), each homophone is weighted in accordance with:\n\ncount = total appearances of the homophone in the current dataset\nmax_count = maximum count of homophones in the sentence\n\n\\[\nw_{i} = 1 - \\frac{{\\text{{count}}}}{{\\text{{max\\_count}} + \\epsilon}}, \\epsilon=1e-10\n\\]\nThese weights seek to give words that we have less data on a higher probability of being selected, testing the model on more homophone mistakes. Without it, common homophones such as “to”, “in”, and “there” would dominate the test data; here, while they remain the most common, it is much more evenly distributed. The homophone is then selected, it and its index saved in order to ensure that the model is recognizing the correct homophone mistake in a sentence if it contains the same word multiple times. The functions final output is a dataframe with the following columns:\n\nsentence (object): New sentence for testing, potentially containing errors.\nhas_homophone (bool): Boolean variable stating whether a sentence contains a homophone.\nis_error (bool): Boolean variable stating whether an error as been added to the sentence.\nerror_idx (float64): Location of the error, if applicable.\nerror (object): The incorrect homophone, if applicable.\ncorrect_word (object): The correct homophone, if applicable.\ncorrect_sentence (object): The final, correct sentence, will be the same as the original sentence if is_error=False.\n\nThe final dataframe has a shape of (68573, 7). 56,484 (82.37%) of these sentences contain at least one homophone, demonstrating the importance of checking for these mistakes. There are 39,446 (57.53%) sentences containing homophone errors. The most commonly replaced homophones were “to”, “in”, “you”, “for”, and “but”. Below is the distribution of total sentences in which homophones were replaced.\nThe final output is saved as a csv file in the data folder as gutenberg-homophone-errors.csv to avoid having to rerun the model every time.\n\n\nCode\nimport plotly.express as px\nimport pandas as pd\nfrom plotly.offline import init_notebook_mode\n\ninit_notebook_mode()\n\nerror_df = pd.read_csv(\"./data/gutenberg-homophone-errors.csv\")\nhomophone_counts = error_df[\"correct_word\"].value_counts(dropna=True).reset_index()\n\n# Sort by count\nhomophone_counts = homophone_counts.sort_values(by=\"correct_word\",ascending=False)\nfig = px.histogram(\n    homophone_counts,\n    x=\"index\",\n    y=\"correct_word\",\n    title=\"&lt;b&gt;Distribution of Replaced Homophones&lt;/b&gt;\",\n    width=800,\n    height=500,\n    category_orders={\"correct_word\": homophone_counts[\"index\"]},\n    hover_name=\"index\",  # Name shown in the tooltip\n    hover_data={\"correct_word\": True},\n)\nfig.update_traces(\n    hovertemplate='&lt;b&gt;Homophone:&lt;/b&gt; %{x}&lt;br&gt;&lt;b&gt;Count:&lt;/b&gt; %{y}',\n)\nfig.update_layout(xaxis_title=\"&lt;b&gt;Homophone&lt;/b&gt;\", yaxis_title=\"&lt;b&gt;Count&lt;/b&gt;\", hovermode=\"x\")\nfig.show()"
  },
  {
    "objectID": "index.html#web-application-design-and-features",
    "href": "index.html#web-application-design-and-features",
    "title": "Homophone Checker Using Bert",
    "section": "Web Application Design and Features",
    "text": "Web Application Design and Features\nOur web app features a design that emphasizes ease of use and minimalism. The interface is intuitive, focusing on functionality, which ensuring that users of all levels can navigate and utilize it without complexity. Key features of the webpage include:\n\nText Input Area A designated area where users can type or paste text. This is the primary interaction point where users input the sentences they want to check for homophone errors.\nCorrection Display Upon submitting their text, users could immediately see the corrected version. The web app provides two types of corrections: one showing homophone corrections and another combining both homophone and spelling corrections. This dual-output approach allows users to compare and understand the enhancements made to their text.\nStyling and Responsiveness The webpage is styled using a style.css file, ensuring the interface is not only visually appealing with a light blue, ‘cute’ theme but also responsive to different device screens. This makes the web app accessible from various devices, enhancing user experience."
  },
  {
    "objectID": "index.html#behind-the-scenes-app.py-and-homophone_utils.py",
    "href": "index.html#behind-the-scenes-app.py-and-homophone_utils.py",
    "title": "Homophone Checker Using Bert",
    "section": "Behind the Scenes: app.py and homophone_utils.py",
    "text": "Behind the Scenes: app.py and homophone_utils.py\nThe backend of the web application, developed in app.py handles user requests and processes text through our homophone checker model. This Python script uses Flask as the web framework, enabling efficient handling of web requests and dynamic content generation.\nhomophone_utils.py plays a crucial role in the backend. It contains the logic for our homophone correction model, which is then used by app.py to process user-input text and generate corrected sentences."
  },
  {
    "objectID": "index.html#deployment-and-usage",
    "href": "index.html#deployment-and-usage",
    "title": "Homophone Checker Using Bert",
    "section": "Deployment and Usage",
    "text": "Deployment and Usage\nThe interactive webpage is deployed to allow easy access for anyone interested in improving their text’s accuracy. Users can visit the webpage, input their text, and quickly receive corrections, making it a practical tool for everyday use.\nThis web app not only shows how well our model works but also makes advanced language processing techniques easy and practical for everyday use. It’s a great example of turning complex language models into user-friendly tools that help improve how we write and communicate, making these advanced technologies accessible and useful for everyone."
  }
]